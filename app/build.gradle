apply plugin: 'com.android.application'

def versionMajor = 0
def versionMinor = 1
def versionPatch = 1
def versionBuild = {
    if (project.hasProperty("buildNumber")) {
        return project.buildNumber as int
    } else if (System.getenv("BUILD_NUMBER")) {
        return System.getenv("BUILD_NUMBER") as int
    } else {
        return 0
    }
}.call()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libraries;
def test = rootProject.ext.testingLibraries;

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        applicationId cfg.package
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode versionMajor * 10000000 + versionMinor * 100000 + versionPatch * 1000 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            storeFile file("../app/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        noCompress 'apk'
    }

    dataBinding {
        enabled true
    }
}

repositories {
    maven { url "https://repo.eclipse.org/content/repositories/paho-releases/" }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    // Android
    compile "com.android.support:design:${libs.supportVersion}"
    compile "com.android.support:appcompat-v7:${libs.supportVersion}"
    compile "com.android.support:cardview-v7:${libs.supportVersion}"
    compile "com.android.support:recyclerview-v7:${libs.supportVersion}"

    compile "com.android.support.constraint:constraint-layout:${libs.constraintLayout}"

    compile "com.google.firebase:firebase-crash:${libs.playServices}"
    compile "com.google.firebase:firebase-analytics:${libs.playServices}"

    compile "com.squareup.retrofit2:retrofit:${libs.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${libs.retrofit}"
    compile "com.squareup.retrofit2:adapter-rxjava:${libs.retrofit}"
    compile "com.squareup.picasso:picasso:${libs.picasso}"

    compile "io.reactivex.rxjava2:rxandroid:${libs.rxandroid}"
    compile "io.reactivex.rxjava2:rxjava:${libs.rxjava}"

    compile "com.google.dagger:dagger:${libs.dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${libs.dagger}"
    provided "org.glassfish:javax.annotation:${libs.javaxAnnotation}"

    compile "com.afollestad.material-dialogs:core:${libs.materialDialogs}"
    compile("com.afollestad:assent:${libs.assent}") {
        transitive = true
    }

    compile "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${libs.pahoMqtt}"
    compile "org.eclipse.paho:org.eclipse.paho.android.service:${libs.pahoMqtt}"

    // Test
    testCompile "junit:junit:${test.junit}"
}

ant.importBuild 'assets.xml'
preBuild.dependsOn(list, checksum)
clean.dependsOn(clean_assets)

apply plugin: 'com.google.gms.google-services'