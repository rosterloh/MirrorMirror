apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = {
    if (project.hasProperty("buildNumber")) {
        return project.buildNumber as int
    } else if (System.getenv("BUILD_NUMBER")) {
        return System.getenv("BUILD_NUMBER") as int
    } else {
        return 0
    }
}.call()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libraries;
def test = rootProject.ext.testingLibraries;

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        applicationId cfg.package
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode versionMajor * 10000000 + versionMinor * 100000 + versionPatch * 1000 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file("../app/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            // Uses new built-in shrinker http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
            useProguard false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
        release {
            debuggable false
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        noCompress 'apk'
    }

    dataBinding {
        enabled true
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    // Android
    compile "com.android.support:design:${libs.supportVersion}"
    compile "com.android.support:appcompat-v7:${libs.supportVersion}"
    //compile "com.android.support:cardview-v7:${libs.supportVersion}"
    //compile "com.android.support:recyclerview-v7:${libs.supportVersion}"
    compile "com.android.support.constraint:constraint-layout:${libs.constraintLayout}"

    //compile "com.google.firebase:firebase-analytics:${libs.playServices}"
    compile "com.google.firebase:firebase-crash:${libs.playServices}"

    compile "com.squareup.retrofit2:retrofit:${libs.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${libs.retrofit}"
    compile "com.squareup.retrofit2:adapter-rxjava2:${libs.retrofit}"

    compile "com.squareup.okhttp3:okhttp:${libs.okhttp}"
    compile "com.squareup.okhttp3:logging-interceptor:${libs.okhttp}"

    compile "io.reactivex.rxjava2:rxandroid:${libs.rxandroid}"
    compile "io.reactivex.rxjava2:rxjava:${libs.rxjava}"

    compile "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${libs.mqttv3}"
    compile "org.eclipse.paho:org.eclipse.paho.android.service:${libs.mqttAndroid}"

    // Dependencies for local unit tests
    testCompile "junit:junit:${test.junit}"
    testCompile "org.mockito:mockito-core:${test.mockito}"
    testCompile "org.hamcrest:hamcrest-all:${test.hamcrest}"

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:${test.runner}"
    androidTestCompile "com.android.support.test:rules:${test.rules}"
    androidTestCompile "com.android.support:support-annotations:${libs.supportVersion}"
    androidTestCompile "junit:junit:${test.junit}"
    androidTestCompile "org.mockito:mockito-core:${test.mockito}"
}

ant.importBuild 'assets.xml'
preBuild.dependsOn(list, checksum)
clean.dependsOn(clean_assets)

apply plugin: 'com.google.gms.google-services'